Assignment-1

Q-1	In gimple in first step type declration takes place. If we
	declared multiple variables in program,then in gimple they
	are declared on each new line i.e. one line for one variable.
	For the global declaration, gimple doesn't declare it again.

Q-2	For the complex expressions, they are executed according to
	their precedence, that is in the given case first the multiplication
	is done and to store tits value, a temperory variable is introduced.

Q-3	Foats and doubles are represented in exponential format. If a
	float or a double is assigned to an integer, internal conversion
	occurs and float/double is converted into integer then assigned
	to integer.

Q-4	As Z is a global variable, then it is not declared in gimple.It is
	directly assigned to 'q'.A temperory variable is introduced for
	[Z = Z + 1] because we are using single variable two times in an
	expression.

___________________________________________________________________________________________


A-2	

Q-1	In gimple the if statements are gets slightly changed. i.e. in gimple
	two blocks are created like <D.3098> and <D.3099> if a condition if 
	true then controlls are passed to <D.3098> as goto and if condition is
	falls then contrtolls are forwarded to second block.They are also called
	unconditional or conditional jumps.

Q-2	

___________________________________________________________________________________________
A-3

Q-1	In this code <bb4> and <bb3> blocks corresponds to while loop.While loop
	is slightly different from simple if else statements as in simple if else
	statements the blocks inside the if else statements are declared after if
	else statements but in while loop the blocks are declared before if else
	statements in gimple.
		

Q-2	<bb 6> , <bb 7> , <bb 8> , <bb 9> and <bb 10> are basic blocks used for
	nested for loops.The speciality of for loops is they are basically while
	loops with an initializer in first block and then while loop and then at
	the end the increment ir decrment operator.
____________________________________________________________________________________________
A-4

Q-1	For array declaration first compiler determines the size of array as
	first array name and then prociding with the size of array in square 
	brackets. Then compiler initializes array in order of their index i.e.
	in first step 0'th index is assigned and then 1st index and so on till
	the size of array.

Q-2	It is because in first step compiler gets the value of b[i] from an array
	b and then it stores in an intermediate variable. Then in second step
	compiler assignes this value to a[i].These are two different steps. So
	a[i] = b[] broken down in two steps.

Q-3	CLOBBER statements indicates that this arrays are no longer Usable.
	Basically this statements are at the end of a code.



____________________________________________________________________________________________


A-5	

Q-1	The suffix '(D)' is there because the variable 'c' iniatialy doesn't contain
	any value. If a variable initially doesn't contain any value, then this suffix
	is used.

Q-2	In the block number <bb5> the assignments merge.so there is introduction of
	PHI nodes.iItis in the form  # a_1 = PHI <a_7(3), a_5(4)> here if we pass
	a_7 in PHI block then its value is assigned to a_1 or if we pass a_5 in PHI
	then its value is assigned to a_1.


Q-3	If more than two merges are there then in angular brackets more than two values
	are introduced.


____________________________________________________________________________________________

A-6	

Code             
	#include<stdio.h>
	
	void main()
	{
	        int i, j;
	        for(i = 2; i<101; i++) {
	                for(j = 2; j<i; j++) {
	                        if(i % j ==0 )
	                                break;
	                        else
	                                i+=1;
	                }
	                if(i == j)
	                        printf("%d\n",i);
	        }
	        return;
	}


_____________________________________________________________________________________________
_____________________________________________________________________________________________


B-2

Q-1	In this code, if N is taken in for loop then at time of execution compiler
	fetches what is value stored in N, but N is replaced by 1 then the compiler
	knows that i have to add 1 to a.Hence execution time of code increases.This
	is a example of group unrollling.

______________________________________________________________________________________________

B-3

Q-1	In this code, 'a' can take values in range from 4 to 100 inclusive of both
	4 and 100.4 because it is preassigned and 100 because when a=99, for loop
	checks wheather 'a' is smaller than hundred or not and as a==99, then again
	loop executes and 'a' is increased by one and now it is 100. The [a < 4]
	condition is alwsys false.


Output:	


                                                                                      |
;; Function main (main, funcdef_no=12, decl_uid=3089, cgraph_uid=13, symbol_order=12) |;; Function main (main, funcdef_no=12, decl_uid=3089, cgraph_uid=13, symbol_order=12) (executed once)
                                                                                      |
main ()                                                                               |;; 2 loops found
{                                                                                     |;;
  int b;                                                                              |;; Loop 0
  int a;                                                                              |;;  header 0, latch 1
  int _8;                                                                             |;;  depth 0, outer -1
                                                                                      |;;  nodes: 0 1 2 3 4 5
  <bb 2> :                                                                            |;;
  a_4 = 4;                                                                            |;; Loop 1
  goto <bb 7>; [INV]                                                                  |;;  header 4, latch 3
                                                                                      |;;  depth 1, outer 0
  <bb 3> :                                                                            |;;  nodes: 4 3
  if (a_1 <= 3)                                                                       |;; 2 succs { 4 }
    goto <bb 4>; [INV]                                                                |;; 3 succs { 4 }
  else                                                                                |;; 4 succs { 3 5 }
    goto <bb 5>; [INV]                                                                |;; 5 succs { 1 }
                                                                                      |
  <bb 4> :                                                                            |SSA replacement table
  b_10 = b_3 + 2;                                                                     |N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j
  goto <bb 6>; [INV]                                                                  |
                                                                                      |b_6 -> { b_2 }
  <bb 5> :                                                                            |Incremental SSA update started at block: 4
  b_9 = b_3 * 2;                                                                      |Number of blocks in CFG: 6
                                                                                      |Number of blocks to update: 3 ( 50%)
  <bb 6> :                                                                            |
  # b_2 = PHI <b_10(4), b_9(5)>                                                       |
  a_11 = a_1 + 1;                                                                     |
                                                                                      |SSA replacement table
  <bb 7> :                                                                            |N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j
  # a_1 = PHI <a_4(2), a_11(6)>                                                       |
  # b_3 = PHI <b_5(D)(2), b_2(6)>                                                     |a_9 -> { a_1 }
  if (a_1 <= 99)                                                                      |Incremental SSA update started at block: 4
    goto <bb 3>; [INV]                                                                |Number of blocks in CFG: 6
  else                                                                                |Number of blocks to update: 2 ( 33%)
    goto <bb 8>; [INV]                                                                |
                                                                                      |
  <bb 8> :                                                                            |
  printf ("%d%d", a_1, b_3);                                                          |Value ranges after VRP:
  _8 = 0;                                                                             |
  return _8;                                                                          |a_1: int [4, 100]
                                                                                      |b_2: VARYING
}                                                                                     |b_3(D): UNDEFINED
                                                                                      |b_6: int [b_2, b_2]
                                                                                      |b_7: VARYING
~                                                                                     |a_8: int [5, 100]
~                                                                                     |a_9: int [4, 99]  EQUIVALENCES: { a_1 } (1 elements)
~                                                                                     |
~                                                                                     |
~                                                                                     |
~                                                                                     |SSA replacement table
~                                                                                     |N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j
~                                                                                     |
~                                                                                     |a_10 -> { a_1 }
~                                                                                     |b_11 -> { b_2 }
~                                                                                     |a_12 -> { a_1 }
~                                                                                     |b_13 -> { b_2 }
~                                                                                     |Incremental SSA update started at block: 6
~                                                                                     |Number of blocks in CFG: 8
~                                                                                     |Number of blocks to update: 5 ( 62%)
~                                                                                     |
~                                                                                     |
~                                                                                     |Merging blocks 2 and 6
~                                                                                     |Removing basic block 3
~                                                                                     |Merging blocks 7 and 4
~                                                                                     |main ()
~                                                                                     |{
~                                                                                     |  int b;
~                                                                                     |  int a;
~                                                                                     |
~                                                                                     |  <bb 2> [local count: 11059540]:
~                                                                                     |
~                                                                                     |  <bb 3> [local count: 1062682284]:
~                                                                                     |  # a_12 = PHI <a_8(3), 4(2)>
~                                                                                     |  # b_13 = PHI <b_7(3), b_3(D)(2)>
~                                                                                     |  b_7 = b_13 * 2;
~                                                                                     |  a_8 = a_12 + 1;
~                                                                                     |  if (a_8 != 100)
~                                                                                     |    goto <bb 3>; [98.96%]
~                                                                                     |  else
~                                                                                     |    goto <bb 4>; [1.04%]
~                                                                                     |
~                                                                                     |  <bb 4> [local count: 11059541]:
~                                                                                     |  # b_6 = PHI <b_7(3)>
~                                                                                     |  printf ("%d%d", 100, b_6);
~                                                                                     |  return 0;
~                                                                                     |
~                                                                                     |}
~                                                                                     |


_______________________________________________________________________________________________________________________________



B-4

Q-1:	In SSA pass(In the original code) the expression (a + c) is evaluated two times.
	But in FRE pass the expression is evaluated only once and stored in a variable
	 and then used at different places.

Q-2:	



Q-3:	we put return 'b' in this statement because we have to return a value of type integer
	and 'b' is also a integer.If we put '0' to return instead of 'b' then compiler have
	to assign 0 value to an temperory variable and the it returns the temperory variable
	having '0' value; but as an integer value is already stored in 'b', 'return b'
	decreases compiler efforts.


__________________________________________________________________________________________________
--------------------------------------------------------------------------------------------------
__________________________________________________________________________________________________